#!/usr/bin/env python3
"""
Loads an HDF5 scan dataset generated by raster_scan_fd_2d_and_save,
displays summary information and creates clear visual plots.

Run it in the same folder as your .h5 file:

    $ python view_hdf5_scan.py phantom_fd_scan.h5
"""

import sys
import h5py
import numpy as np
import matplotlib.pyplot as plt

def main(h5_file):
    print(f"üìÇ Loading HDF5 file: {h5_file}")
    with h5py.File(h5_file, "r") as f:
        amplitude = f["amplitude"][:]
        phase = f["phase"][:]
        src_pos = f["source_pos"][:]
        det_pos = f["det_pos"][:]

    n_positions, n_detectors = amplitude.shape
    print(f"\n‚úÖ Dataset info:")
    print(f"  ‚Ä¢ Source positions : {src_pos.shape}")
    print(f"  ‚Ä¢ Detector positions : {det_pos.shape}")
    print(f"  ‚Ä¢ Amplitude data : {amplitude.shape}")
    print(f"  ‚Ä¢ Phase data     : {phase.shape}")

    print("\nExample source and detectors at first scan position:")
    print("  Source:", src_pos[0])
    print("  Detectors:\n", det_pos[0])

    # ---------------------------------------------
    # Line plots vs scan index
    # ---------------------------------------------
    fig, axs = plt.subplots(1,2, figsize=(14,5))
    for d in range(n_detectors):
        axs[0].plot(amplitude[:,d], 'o-', label=f"Det {d+1}")
        axs[1].plot(np.degrees(phase[:,d]), 'o-', label=f"Det {d+1}")

    axs[0].set_title("Amplitude vs scan index")
    axs[0].set_xlabel("Scan index")
    axs[0].set_ylabel("Amplitude (a.u.)")
    axs[0].grid(True)
    axs[0].legend()

    axs[1].set_title("Phase vs scan index")
    axs[1].set_xlabel("Scan index")
    axs[1].set_ylabel("Phase (degrees)")
    axs[1].grid(True)
    axs[1].legend()

    plt.suptitle("Frequency domain scan across phantom")
    plt.tight_layout()
    plt.show()

    # ---------------------------------------------
    # 2D heatmap of mean amplitude / phase
    # ---------------------------------------------
    try:
        n_x = len(np.unique(src_pos[:,0]))
        n_y = len(np.unique(src_pos[:,1]))
        amp_mean = amplitude.mean(axis=1).reshape((n_x, n_y)).T
        pha_mean = np.degrees(phase).mean(axis=1).reshape((n_x, n_y)).T

        fig, axs = plt.subplots(1,2, figsize=(14,6))
        im1 = axs[0].imshow(amp_mean, cmap='viridis', origin='lower', 
                            extent=[src_pos[:,0].min(), src_pos[:,0].max(), 
                                    src_pos[:,1].min(), src_pos[:,1].max()])
        axs[0].set_title("Mean amplitude across scan")
        axs[0].set_xlabel("X position (mm)")
        axs[0].set_ylabel("Y position (mm)")
        fig.colorbar(im1, ax=axs[0])

        im2 = axs[1].imshow(pha_mean, cmap='twilight', origin='lower', 
                            extent=[src_pos[:,0].min(), src_pos[:,0].max(), 
                                    src_pos[:,1].min(), src_pos[:,1].max()])
        axs[1].set_title("Mean phase across scan")
        axs[1].set_xlabel("X position (mm)")
        axs[1].set_ylabel("Y position (mm)")
        fig.colorbar(im2, ax=axs[1])

        plt.suptitle("2D raster scan summary heatmaps")
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print("\n‚ö†Ô∏è Could not create 2D heatmap (data might not be on regular grid).")
        print("Reason:", e)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python view_hdf5_scan.py phantom_fd_scan.h5")
    else:
        main(sys.argv[1])
